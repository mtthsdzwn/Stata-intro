/* 0. Preliminaries *//* version control */version 10/* clear other data from memory */clear/* get rid of those annoying "more" messages */set more off, perm/* Do not allow abbreviations of variables */set varabbrev off/* Set the standard directory; change for your particular settings! */cd "/Users/matthijsdezwaan/workdir/Stata intro"/* Close other log files that might be open */cap log close log1cap log close log2cap log close/* load your data */use intro.dta, clear/* Create a log file */log using stataintro.smcl, replace name(log1)/* note: multiple log files are possible, but you have to name them differently! *//***************Project: Stata introduction LectureDate: June 8, 2009Author: Matthijs de Zwaan***************/describe, short/*********Getting to know your data *********/log off log1 /* temporarily pause logging */inspectdescribelog using codebook.smcl, replace name(log2)codebooklog close log2log on log1codebook, problemscodebook H_rel F_rel P_relcodebook ?_relcodebook *_rellookfor relsumm H_relsumm H_rel, detailby cityid, sort: summ F_rel/* NB! now sorted by year! may be we need to re-sort*/sort cityid year/* Correlations */pwcorr lnpop ?_rel/* tabulate frequency of cross-categorization */tab cityid business/*********Creating new variables*********//* "cap(ture) drop" your new variables! *//* Check the gen(erate)-help file for possible uses:- mathematical expressions- logical expressions- distributions*/capture drop lnpopgen lnpop=ln(population)label var lnpop "Ln of population" /* label your variable */cap drop dcity*gen dcity1=0replace dcity1=1 if cityid==1 /* NB! Check "=" versus "==" */cap drop dcity1gen dcity1=0replace dcity1=(cityid==1)/* Tricks for dummies */label define citynames 1 "Apeldoorn" 2 "Deventer" 3 "Zwolle", modifylabel values cityid citynames /* label your variable values */cap drop dcity?tab cityid, gen(dcity)gen normal=rnormal()drop normal/* Use "egen" for special functions Check help egen*//*********Doing some analysis*********//* OLS => reg(ress) */reg lnpop H_rel GDP_change dum_rail/* adjustments for standard errors: , vce() */reg lnpop H_rel GDP_change dum_rail, vce(robust)reg lnpop H_rel GDP_change dum_rail, vce(cluster cityid)/*use "predict" for post-analysissee help "regress postestimation" for many other analysis facilitiesDifferent estimations have different possibilities*/cap drop yhatcap drop uhat predict yhat, xbpredict uhat, residuals/* plot of resids versus fitted values */ scatter uhat yhat/* easier: */rvfplot/* "help estimation commands" provides a list of all estimation commands *//* setting time series and panels *//* declare times series with var year as time variable time series estimation and many post estimation tools now available.see help timetsset yearNB! Not possible here, only if only one panel*//* declare panel data with cityid as panel and year as time var see help xt*/xtset cityid year xtreg lnpop H_rel GDP_change dum_rail, fereg lnpop H_rel GDP_change dum_rail dcity2 dcity3xi: reg lnpop H_rel GDP_change dum_rail i.cityid/* L. : lagged valuesF. : lead valuesD. : year on year differenceD4. : 4-lag differenced(0/4). : contemporaneous + 4 lags*/ /********* Saving, comparing, presenting results *********/xtreg lnpop H_rel GDP_change dum_rail, fe estimates store FExtreg lnpop H_rel GDP_change dum_rail, re est sto REhausman FE REestimates table FE RE, star(.1 .05 .01)/* Installing user-written programs:ssc install estoutfindit estout*/estout FE RE using "/Users/matthijsdezwaan/Desktop/stataintro.xls", cells(b(star fmt(3)) se(fmt(2))) ///		starlevels(* 0.10 ** 0.05 *** 0.01) legend style(tab) replace/* see also: outreg2, tabout *//* Graphs */graph twoway scatter H_rel lnpopscatter H_rel lnpop if cityid==1scatter H_rel lnpop if cityid==1, ///	title(Stata) subtitle(Intro to graphs) ///	legend(	lab(1 "Apeldoorn") ///			lab(2 "Deventer") ///			lab(3 "Zwolle")) ///|| scatter H_rel lnpop if cityid==2 ///|| scatter H_rel lnpop if cityid==3/* tsline; time series line, tsline H_rel if cityid==1 is the same as "graph twoway line H_rel year", but with nicer lay out and labellingxtline: panel data graph*/xtline H_rel P_rel F_reltsline H_rel if cityid==3 ///|| tsline P_rel if cityid==3, yaxis(2) ///|| tsline F_rel if cityid==3, yaxis(3)/*********Basic programming*********//*Local and Global macros:macros can hold a list of stringsthat can later be referred to."Locals" are particular to your program/do file, and will beforgotten as soon as it ends. It can not be referred to from outside the program.Globals can be referred form outside, but are rarely used (except for hardcore programmers).*/local indices H_rel P_rel F_reldisplay "`indices'"foreach index of local indices	{	di "`index' =" `index'}local count=1while `count'<=10	{	di `count'	local ++count}/*NB! Note the quotes! First `, then '.*//* loops in stata:foreachforval(ues)*/forval i=1/3	{tsline H_rel if cityid==`i', ///	yaxis(1) ytitle("H", axis(1) orientation(horizontal) margin(medsmall)) ///	title("Religious Pluralism") ///	subtitle("in `:label cityid `i''") ///	legend(	lab(1 "Simpson index") ///			lab(2 "Fractionalisation index") ///			lab(3 "Polarisation index")) ///|| tsline F_rel if cityid==`i', ///	yaxis(2) ytitle("F", axis(2) orientation(horizontal) margin(medsmall)) ///|| tsline P_rel if cityid==`i', ///	yaxis(3) ytitle("P", axis(3) orientation(horizontal) margin(medsmall))	graph save "/Users/matthijsdezwaan/Desktop/graph`:label cityid `i''", replacegraph export "/Users/matthijsdezwaan/Desktop/graph1.pdf", replace/* NB! PC cannot export to .pdf, only Macs can. PCs can export towindows meta files (graphname.wmv). Both can use post script graphs (graphname.eps)*/}graph drop _all /* clear all graphs from memory (but does not delete the saved files!) *//* NB! in the "foreach i=É command",`i' can have any name. *//* forval and foreach have the same structure.foreach loops over items of a listforval loops over consecutive valuesforval i=1/10	{	command1	command2	command3}OR forval i=2(2)10 {Éloop for 2, 4, 6, 8 and 10foreach name of varlist list-of-names	{Éforeach name of local list-of-names	{ÉForeach and forval can be nested*/local indices H_rel P_rel F_relforval city=1/3	{	foreach index of local indices	{		quietly reg lnpop l.lnpop `index' GDP_change dum_rail if cityid==`city'		est sto `index'`city'	}}est tab ?_rel?, stats(r2_a)/* ifÉelse constructions if [condition1]	{	<works only if condition1 holds>	command1}else	{	<works if condition1 does not hold>	command2}Can be used with the "capture" command*/* Example: table of proportions for Zwolle:preserve /* preserve the data at this point, to be restored later */keep if cityid==3 /* delete all data except for Zwolle cap drop totalcap drop tempcap drop prop/**************//* Save your data *//* Compress may leave your data set much smaller and more efficient (sometimes)*/compresssave stataintro.dta, replace/* Stop logging and save the log */log close log1/* Tell Stata that this is the end of your do file */exit